{"ast":null,"code":"import SearchBar from\"../components/SearchBar/SearchBar\";var clientId='80175fa976e540598689c88145d56e1c';var redirectURI='http://jamming-ishant.surge.sh/';var userAccessToken;var Spotify={getAccessToken:function getAccessToken(){if(userAccessToken){return userAccessToken;}var accessToken=window.location.href.match(/access_token=([^&]*)/);var expiresIn=window.location.href.match(/expires_in=([^&]*)/);if(accessToken&&expiresIn){userAccessToken=accessToken[1];var userExpiresIn=Number(expiresIn[1]);window.setTimeout(function(){return userAccessToken='';},userExpiresIn*1000);window.history.pushState('Access Token',null,'/');return userAccessToken;}else{var url=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);window.location=url;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/Users/ishantsingla18/Desktop/jamming-codecademy-project/jamming/src/util/Spotify.js"],"names":["SearchBar","clientId","redirectURI","userAccessToken","Spotify","getAccessToken","accessToken","window","location","href","match","expiresIn","userExpiresIn","Number","setTimeout","history","pushState","url","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["import SearchBar from \"../components/SearchBar/SearchBar\";\n\nconst clientId = '80175fa976e540598689c88145d56e1c';\nconst redirectURI = 'http://jamming-ishant.surge.sh/';\nlet userAccessToken;\nconst Spotify = {\n    getAccessToken() {\n        if(userAccessToken) {\n            return userAccessToken;\n        }\n\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n        if(accessToken && expiresIn) {\n            userAccessToken = accessToken[1];\n            const userExpiresIn = Number(expiresIn[1]);\n            window.setTimeout(() => userAccessToken = '', userExpiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        }\n        else {\n            const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = url;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }).then(response => {\n          return response.json();\n        }).then(jsonResponse => {\n          if (!jsonResponse.tracks) {\n            return [];\n          }\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        });\n    },\n    \n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n          return;\n        }\n    \n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n          userId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: name})\n          }).then(response => response.json()\n          ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({uris: trackUris})\n            });\n          });\n        });\n    }\n};\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}