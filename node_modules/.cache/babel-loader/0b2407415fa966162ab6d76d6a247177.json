{"ast":null,"code":"import SearchBar from \"../components/SearchBar/SearchBar\";\nconst clientId = '80175fa976e540598689c88145d56e1c';\nconst redirectURI = 'http://localhost:3000/';\nlet userAccessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n\n    const accessToken = window.location.href.match(/access_token=([^&]*)/);\n    const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessToken && expiresIn) {\n      userAccessToken = accessToken[1];\n      const userExpiresIn = Number(expiresIn[1]);\n      window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return userAccessToken;\n    } else {\n      const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = url;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/ishantsingla18/Desktop/jamming-codecademy-project/jamming/src/util/Spotify.js"],"names":["SearchBar","clientId","redirectURI","userAccessToken","Spotify","getAccessToken","accessToken","window","location","href","match","expiresIn","userExpiresIn","Number","setTimeout","history","pushState","url","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["import SearchBar from \"../components/SearchBar/SearchBar\";\n\nconst clientId = '80175fa976e540598689c88145d56e1c';\nconst redirectURI = 'http://localhost:3000/';\nlet userAccessToken;\nconst Spotify = {\n    getAccessToken() {\n        if(userAccessToken) {\n            return userAccessToken;\n        }\n\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n        if(accessToken && expiresIn) {\n            userAccessToken = accessToken[1];\n            const userExpiresIn = Number(expiresIn[1]);\n            window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        }\n        else {\n            const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = url;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }).then(response => {\n          return response.json();\n        }).then(jsonResponse => {\n          if (!jsonResponse.tracks) {\n            return [];\n          }\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        });\n    },\n    \n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n          return;\n        }\n    \n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n          userId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: name})\n          }).then(response => response.json()\n          ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({uris: trackUris})\n            });\n          });\n        });\n    }\n};\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}