{"ast":null,"code":"import SearchBar from \"../components/SearchBar/SearchBar\";\nconst clientId = '80175fa976e540598689c88145d56e1c';\nconst redirectURI = 'http://localhost:3000/';\nlet userAccessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n\n    const accessToken = window.location.href.match(/access_token=([^&]*)/);\n    const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessToken && expiresIn) {\n      userAccessToken = accessToken[1];\n      const userExpiresIn = Number(expiresIn[1]);\n      window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return userAccessToken;\n    } else {\n      const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = url;\n    }\n  },\n\n  async search(term) {\n    const accessToken = Spotify.getAccessToken();\n    const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: 'Bearer' + accessToken\n      }\n    });\n    const jsonResponse = await response.json();\n\n    if (jsonResponse.tracks) {\n      return jsonResponse.tracks.items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    } else {\n      return [];\n    }\n  },\n\n  async savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || trackURIs.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: 'Bearer' + accessToken\n    };\n    let userId;\n    const response = await fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    });\n    const jsonResponse = await response.json();\n    userId = jsonResponse.id;\n    const response2 = await fetch(`/v1/users/${userId}/playlists`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        name: playlistName\n      })\n    });\n    const jsonResponse2 = await response2.json();\n    const playlistID = jsonResponse2.id;\n    const response3 = await fetch(`/v1/users/${user_id}/playlists/${playlist_id}/tracks`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        uris: trackURIs\n      })\n    });\n    const jsonResponse3 = await response3.json();\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/ishantsingla18/Desktop/jamming-codecademy-project/jamming/src/util/Spotify.js"],"names":["SearchBar","clientId","redirectURI","userAccessToken","Spotify","getAccessToken","accessToken","window","location","href","match","expiresIn","userExpiresIn","Number","setTimeout","history","pushState","url","search","term","response","fetch","headers","Authorization","jsonResponse","json","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","length","userId","response2","method","body","JSON","stringify","jsonResponse2","playlistID","response3","user_id","playlist_id","uris","jsonResponse3"],"mappings":"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","sourcesContent":["import SearchBar from \"../components/SearchBar/SearchBar\";\n\nconst clientId = '80175fa976e540598689c88145d56e1c';\nconst redirectURI = 'http://localhost:3000/';\nlet userAccessToken;\nconst Spotify = {\n    getAccessToken() {\n        if(userAccessToken) {\n            return userAccessToken;\n        }\n\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n        if(accessToken && expiresIn) {\n            userAccessToken = accessToken[1];\n            const userExpiresIn = Number(expiresIn[1]);\n            window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        }\n        else {\n            const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = url;\n        }\n    },\n\n    async search(term) {\n        const accessToken = Spotify.getAccessToken();\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: 'Bearer' + accessToken\n            }\n        });\n        const jsonResponse = await response.json();\n        if(jsonResponse.tracks) {\n            return jsonResponse.tracks.items.map(track => {\n                return {\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                };\n            });\n        }\n        else {\n            return [];\n        }\n    },\n\n    async savePlaylist(playlistName, trackURIs) {\n        if(!playlistName || trackURIs.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: 'Bearer' + accessToken\n        };\n        let userId;\n\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        })\n        const jsonResponse = await response.json();\n        userId = jsonResponse.id;\n\n        const response2 = await fetch(`/v1/users/${userId}/playlists`, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({ name: playlistName })\n        });\n        const jsonResponse2 = await response2.json();\n        const playlistID = jsonResponse2.id;\n\n        const response3 = await fetch(`/v1/users/${user_id}/playlists/${playlist_id}/tracks`, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({ uris: trackURIs })\n        })\n        const jsonResponse3 = await response3.json();\n    }\n};\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}