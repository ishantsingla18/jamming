{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["userAccessToken","SearchBar","props","state","term","search","bind","handleTermChange","e","this","setState","target","value","onSearch","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","renderAction","onAdd","track","onRemove","isRemoval","name","artist","album","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","event","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessToken","window","location","href","match","expiresIn","userExpiresIn","Number","setTimeout","history","pushState","url","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","playlistTrack","push","filter","currentTrack","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e7c7d0f.chunk.js","sourcesContent":["import SearchBar from \"../components/SearchBar/SearchBar\";\n\nconst clientId = '80175fa976e540598689c88145d56e1c';\nconst redirectURI = 'http://jamming-ishant.surge.sh/';\nlet userAccessToken;\nconst Spotify = {\n    getAccessToken() {\n        if(userAccessToken) {\n            return userAccessToken;\n        }\n\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n        if(accessToken && expiresIn) {\n            userAccessToken = accessToken[1];\n            const userExpiresIn = Number(expiresIn[1]);\n            window.setTimeout(() => userAccessToken = '', userExpiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        }\n        else {\n            const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = url;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        }).then(response => {\n          return response.json();\n        }).then(jsonResponse => {\n          if (!jsonResponse.tracks) {\n            return [];\n          }\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        });\n    },\n    \n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n          return;\n        }\n    \n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n    \n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n          userId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: name})\n          }).then(response => response.json()\n          ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({uris: trackUris})\n            });\n          });\n        });\n    }\n};\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: ''\n        }\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    handleTermChange(e) {\n        this.setState({ term: e.target.value });\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.renderAction = this.renderAction.bind(this);\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    renderAction() {\n        if(this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n        }\n        else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track'\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />)}\n            </div>\n        );\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event)  {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return(\n            <div className=\"Playlist\">\n                <input defaultValue=\"New Playlist\" onChange={this.handleNameChange} />\n                <TrackList tracks={this.props.playlistTracks}\n                           onRemove={this.props.onRemove}\n                           isRemoval={true} />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist;","import './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(playlistTrack => playlistTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    });\n  }\n\n  search(track) {\n    Spotify.search(track).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}